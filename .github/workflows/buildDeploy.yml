name: Build and deploy docker image

# Controls when the workflow will run
on: [workflow_dispatch]   # Allows you to run this workflow manually from the Actions tab
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]

env:
  RELEASE_REVISION: "${{ github.sha }}"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: default
  ECR_REPOSITORY: app-frontend
#   SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Cancel Previous Runs               
        uses: styfle/cancel-workflow-action@0.4.1
        with:                                    
          access_token: ${{ github.token }}

      - name: Checkout                                  
        uses: actions/checkout@v2                       
        with:                                           
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Configure AWS credentials                          
        uses: aws-actions/configure-aws-credentials@v1           
        with:                                                    
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}        
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR            
        id: login-ecr                        
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Checkout Dockerfile repository
        uses: actions/checkout@v1
        with:
            repository: joinColony/colony-docker-images
            path: ./colonyInfrastructure/colony-docker-images
            ref: master
      
      - name: Build and push image
        run: |
          docker build --build-arg DEV=${DEV} --build-arg COMMIT_HASH=$RELEASE_REVISION --no-cache -t 268828583045.dkr.ecr.eu-west-2.amazonaws.com/app-frontend:RELEASE_REVISION .
          docker push 268828583045.dkr.ecr.eu-west-2.amazonaws.com/app-frontend:$RELEASE_REVISION
    
      # - name: Deploy to Kubernetes cluster                                                                            
      #   uses: kodermax/kubectl-aws-eks@master                                                                         
      #   env:                                                                                                          
      #     RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_REVISION }}
      #   with:                                                                                                         
      #     args: set image deployment/my-pod app=${{ env.RELEASE_IMAGE }} --record -n $KUBE_NAMESPACE
            
      # - name: Verify Kubernetes deployment                               
      #   uses: kodermax/kubectl-aws-eks@master                            
      #   with:                                                            
      #     args: rollout status deploy my-pod -n $KUBE_NAMESPACE
      
      # Placeholder for discord notification step
      # - name: Slack notification                                
      #   uses: rtCamp/action-slack-notify@master                 
      #   env:                                                    
      #     SLACK_CHANNEL: my_cool_channel                   
      #     SLACK_MESSAGE: 'Just deployed our cool application!'
      #     SLACK_TITLE: 'Deploy'                         
      #     SLACK_USERNAME: 'Some Bot'                           
      #     SLACK_ICON: "[icon URL]"
      #     SLACK_COLOR: '#228B22'                                
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}       
      #     MSG_MINIMAL: true 