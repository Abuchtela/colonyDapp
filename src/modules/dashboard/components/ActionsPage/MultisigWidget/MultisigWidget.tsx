import React, { ReactNode, useMemo, useState } from 'react';
import { ColonyRole } from '@colony/colony-js';
import { Address } from '~types/index';
import styles from './MultisigWidget.css';
import HookedUserAvatar from '~users/HookedUserAvatar';
import PermissionsLabel from '~core/PermissionsLabel';
import ProgressBar from '~core/ProgressBar';
import { nanoid } from 'nanoid';
import {
  defineMessages,
  FormattedMessage
} from 'react-intl';

const displayName = 'dashboard.ActionsPage.MultisigWidget';

const MSG = defineMessages({
  title: {
    id: 'ActionsPage.MultisigWidget.title',
    defaultMessage: `Members with {permissionLabel} permission`,
  },
  progressBarLabel: {
    id: 'ActionsPage.MultisigWidget.progressBarLabel',
    defaultMessage: `{value} of {max} signatures ({required} required)`,
  },
});

const UserAvatar = HookedUserAvatar({fetchUser: true});

interface Props {
  // List of user addresses which are allowed to approve
  membersAllowedForApproval: Address[];
  // Required number of approval
  requiredNumber: number;
  /* Required perimission. For now we have only case with recorvery mode.
  But in future we can have other usecases*/
  requiredPermission: ColonyRole;
  // Children
  children?: ReactNode;
}

const MultisigWidget = ({ membersAllowedForApproval, requiredNumber, requiredPermission, children }: Props) => {
  const [autogeneratedIds] = useState<string[]>(
    [...new Array(membersAllowedForApproval.length)].map(nanoid),
  );

  /* @TODO Mocked for now. This information will be fetched from contract.
  For each address we will fetch status which determine if this user already approved.
  Then we will count all "approval" */
  const alreadyApproved = 3;

  return (
    <div className={styles.wrapper}>
      <h3 className={styles.title}>
        <FormattedMessage
          {...MSG.title}
          values={{
            permissionLabel: (
              <PermissionsLabel
                permission={requiredPermission}
              />
            ),
          }}
        />
      </h3>
      <div className={styles.avatars}>
        {membersAllowedForApproval.map((address, index) => {
          // @TODO get status for address
          const approved = index % 2 === 0;
          return ( <div key={autogeneratedIds[index]}>
              <UserAvatar
                size="s"
                address={address}
                notSet={false}
              />
              <span className={`${styles.status} ${approved && styles.statusApproved}`}/>
            </div>
          )
        })}
      </div>
      <p className={styles.progressBarLabel}>
        <FormattedMessage
          {...MSG.progressBarLabel}
          values={{
            required: requiredNumber,
            value: alreadyApproved,
            max: membersAllowedForApproval.length
          }}
        />
      </p>
      <ProgressBar
        value={alreadyApproved}
        max={membersAllowedForApproval.length}
      />
      <div className={styles.footer}>
        {children}
      </div>
    </div>
  );
};

MultisigWidget.displayName = displayName;

export default MultisigWidget;
