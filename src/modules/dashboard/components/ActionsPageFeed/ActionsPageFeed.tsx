import React, { useState, useMemo, ReactElement } from 'react';
import { nanoid } from 'nanoid';
import {
  FormattedMessage,
  defineMessages,
  MessageDescriptor,
} from 'react-intl';

import { SpinnerLoader } from '~core/Preloaders';

import { getEventsForActions } from '~utils/events';

import {
  useTransactionMessagesQuery,
  ParsedEvent,
  AnyUser,
  OneDomain,
  ColonyAction,
  Colony,
  TransactionMessageFragment,
} from '~data/index';
import {
  ActionUserRoles,
  ColonyActions,
  UniversalMessageValues,
} from '~types/index';

import ActionsPageFeedItem from './ActionsPageFeedItem';
import ActionsPageEvent from './ActionsPageEvent';
import ActionsPageTip, { Appearance as TipAppearance } from './ActionsPageTip';

import styles from './ActionsPageFeed.css';

const displayName = 'dashboard.ActionsPageFeed';

const MSG = defineMessages({
  loading: {
    id: 'dashboard.ActionsPageFeed.loading',
    defaultMessage: 'Loading action page feed',
  },
});

interface TipConfiguration {
  text: MessageDescriptor | string;
  textValues?: UniversalMessageValues;
  appearance?: TipAppearance;
}

export interface EventValues {
  actionType: string;
  amount?: string | ReactElement;
  tokenSymbol?: string | ReactElement;
  decimals?: number;
  fromDomain?: OneDomain;
  toDomain?: OneDomain;
  oldVersion?: string;
  newVersion?: string;
  colonyName?: string | ReactElement;
  roles?: ActionUserRoles[];
}

interface Props {
  transactionHash: string;
  networkEvents?: ParsedEvent[];
  recipient?: AnyUser;
  values?: EventValues;
  actionType?: string;
  actionData: ColonyAction;
  colony: Colony;
  tip?: TipConfiguration;
}

const ActionsPageFeed = ({
  transactionHash,
  networkEvents,
  values,
  actionType,
  actionData,
  colony,
  tip,
}: Props) => {
  const [autogeneratedIds, regenerateIds] = useState<string[]>([]);

  const { data, loading, error } = useTransactionMessagesQuery({
    variables: { transactionHash },
  });

  const filteredEvents = useMemo(() => {
    if (networkEvents) {
      return getEventsForActions(networkEvents, actionType as ColonyActions);
    }
    return [];
  }, [actionType, networkEvents]);

  const sortedFeed = useMemo(() => {
    if (filteredEvents && data?.transactionMessages?.messages) {
      const feedItems: Array<
        ParsedEvent | TransactionMessageFragment | Record<string, any>
      > = [...filteredEvents, ...data.transactionMessages.messages].sort(
        ({ createdAt: createdAtFirst }, { createdAt: createdAtSecond }) =>
          new Date(createdAtFirst).getTime() -
          new Date(createdAtSecond).getTime(),
      );
      /*
       * If we need to show a tip in the feed, we just insert a simple
       * object that we can use to test against.
       *
       * Note that the logic here is that if we have tip to display, always
       * show it as the second item in the feed (index 1)
       *
       * (We could have also used the index, but this way is more readable)
       */
      if (tip) {
        feedItems.splice(1, 0, { feedHasTip: true });
      }
      /*
       * We need to re-generate the ids since the array length now increses
       */
      regenerateIds([...new Array(feedItems.length)].map(nanoid));
      return feedItems;
    }
    return [];
  }, [filteredEvents, data, tip, regenerateIds]);

  if (error) {
    console.error(error);
  }

  if (loading || !data?.transactionMessages) {
    return (
      <div className={styles.loading}>
        <SpinnerLoader />
        <span className={styles.loaderMessage}>
          <FormattedMessage {...MSG.loading} />
        </span>
      </div>
    );
  }

  return (
    <ul className={styles.main}>
      {sortedFeed.map((eventOrMessage, index) => {
        /*
         * If we have a name prop, than this is an event
         */
        if ((eventOrMessage as ParsedEvent)?.name) {
          const { name, createdAt, emmitedBy } = eventOrMessage as ParsedEvent;
          return (
            <ActionsPageEvent
              key={autogeneratedIds[index] || index}
              eventIndex={index}
              createdAt={new Date(createdAt)}
              transactionHash={transactionHash}
              eventName={name}
              actionData={actionData}
              values={values}
              emmitedBy={emmitedBy}
              colony={colony}
            />
          );
        }
        /*
         * If we have the feedHasTip prop, it means we should show the tip
         * We double-check if we have the tip object config as well
         */
        if ((eventOrMessage as Record<string, any>)?.feedHasTip && tip) {
          const { text, textValues, appearance } = tip;
          return (
            <ActionsPageTip
              key={autogeneratedIds[index] || index}
              tip={text}
              tipValues={textValues}
              appearance={appearance}
            />
          );
        }
        /*
         * If we have a sourceId prop, than this is a comment
         */
        if ((eventOrMessage as TransactionMessageFragment)?.sourceId) {
          const {
            initiator: messageInitiator,
            createdAt,
            sourceId,
            context: { message },
          } = eventOrMessage as TransactionMessageFragment;
          return (
            <ActionsPageFeedItem
              key={sourceId}
              createdAt={createdAt}
              comment={message}
              user={messageInitiator}
            />
          );
        }
        return null;
      })}
    </ul>
  );
};

ActionsPageFeed.displayName = displayName;

export default ActionsPageFeed;
