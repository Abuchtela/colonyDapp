query SubgraphMotionEvents($colonyAddress: String!, $motionId: String!) {
  motionEvents: events(
    where: {
      name_in: [
        "MotionStaked(uint256,address,uint256,uint256)",
        "MotionFinalized(uint256,bytes,bool)",
        "MotionRewardClaimed(uint256,address,uint256,uint256)",
      ]
      associatedColony: $colonyAddress
      args_contains: $motionId
    }
  ) {
    id
    address
    name
    args
    transaction {
      id
      transactionHash: id
      block {
        id
        number: id
        timestamp
      }
    }
  }
}

query SubgraphMotionSystemEvents($colonyAddress: String!, $motionId: String!) {
  motionSystemEvents: events(
    where: {
      name_in: [
        "MotionStaked(uint256,address,uint256,uint256)",
        "MotionVoteSubmitted(uint256,address)",
        "MotionVoteRevealed(uint256,address,uint256)",
      ]
      associatedColony: $colonyAddress
      args_contains: $motionId
    }
  ) {
    id
    address
    name
    args
    transaction {
      id
      transactionHash: id
      block {
        id
        number: id
        timestamp
      }
    }
  }
}

query SubgraphMotionVoteSubmittedEvents($colonyAddress: String!, $motionId: String!) {
  motionVoteSubmittedEvents: events(
    where: {
      name_contains: "MotionVoteSubmitted"
      associatedColony: $colonyAddress
      args_contains: $motionId
    }
  ) {
    id
    address
    name
    args
    transaction {
      id
      transactionHash: id
      block {
        id
        number: id
        timestamp
      }
    }
  }
}

query SubgraphMotionVoteRevealedEvents($colonyAddress: String!, $motionId: String!) {
  motionVoteRevealedEvents: events(
    where: {
      name_contains: "MotionVoteRevealed"
      associatedColony: $colonyAddress
      args_contains: $motionId
    }
  ) {
    id
    address
    name
    args
    transaction {
      id
      transactionHash: id
      block {
        id
        number: id
        timestamp
      }
    }
  }
}

query SubgraphMotionStakedEvents($colonyAddress: String!, $motionId: String!) {
  motionStakedEvents: events(
    where: {
      name_contains: "MotionStaked"
      associatedColony: $colonyAddress
      args_contains: $motionId
    }
  ) {
    id
    address
    name
    args
    transaction {
      id
      transactionHash: id
      block {
        id
        number: id
        timestamp
      }
    }
  }
}

query SubgraphUserMotionTokenEvents($colonyAddress: String!, $walletAddress: String!) {
  motionStakedEvents: events(
    where: {
      associatedColony: $colonyAddress
      name_contains: "MotionStaked"
      args_contains: $walletAddress,
    }
  ) {
    id
    address
    name
    args
    transaction {
      id
      transactionHash: id
      block {
        id
        number: id
        timestamp
      }
    }
  }
  motionRewardClaimedEvents: events(
    where: {
      associatedColony: $colonyAddress
      name_contains: "MotionRewardClaimed"
      args_contains: $walletAddress,
    }
  ) {
    id
    name
    args
    address
    transaction {
      id
      transactionHash: id
      block {
        id
        number: id
        timestamp
      }
    }
  }
}


query SubgraphMotionRewardClaimedEvents($colonyAddress: String!, $motionId: String!) {
  motionRewardClaimedEvents: events(
    where: {
      associatedColony: $colonyAddress
      name_contains: "MotionRewardClaimed"
      args_contains: $motionId,
    }
  ) {
    id
    name
    args
    address
    transaction {
      id
      transactionHash: id
      block {
        id
        number: id
        timestamp
      }
    }
  }
}

query EventsForMotion($motionId: Int!, $colonyAddress: String!) {
  eventsForMotion(motionId: $motionId, colonyAddress: $colonyAddress) @client {
    type
    name
    values
    createdAt
    emmitedBy
    blockNumber
    transactionHash
  }
}

query MotionStakes($colonyAddress: String!, $userAddress: String!, $motionId: Int!) {
  motionStakes(colonyAddress: $colonyAddress, userAddress: $userAddress, motionId: $motionId) @client {
    totalNAYStakes
    remainingToFullyYayStaked
    remainingToFullyNayStaked
    maxUserStake
    minUserStake
  }
}

query MotionsSystemMessages($motionId: Int!, $colonyAddress: String!) {
  motionsSystemMessages(motionId: $motionId, colonyAddress: $colonyAddress) @client {
    type
    name
    createdAt
  }
}

query MotionVoterReward($motionId: Int!, $colonyAddress: String!, $userAddress: String!) {
  motionVoterReward(motionId: $motionId, colonyAddress: $colonyAddress, userAddress: $userAddress) @client {
    reward
    minReward
    maxReward
  }
}

query MotionUserVoteRevealed($motionId: Int!, $colonyAddress: String!, $userAddress: String!) {
  motionUserVoteRevealed(motionId: $motionId, colonyAddress: $colonyAddress, userAddress: $userAddress) @client {
    revealed
    vote
  }
}

query MotionVoteResults($motionId: Int!, $colonyAddress: String!, $userAddress: String!) {
  motionVoteResults(motionId: $motionId, colonyAddress: $colonyAddress, userAddress: $userAddress) @client {
    currentUserVoteSide
    yayVotes
    yayVoters
    nayVotes
    nayVoters
  }
}

query VotingState($colonyAddress: String!, $motionId: Int!) {
  votingState(colonyAddress: $colonyAddress, motionId: $motionId, ) @client {
    thresholdValue
    totalVotedReputation
    skillRep
  }
}

query MotionCurrentUserVoted($motionId: Int!, $colonyAddress: String!, $userAddress: String!) {
  motionCurrentUserVoted(motionId: $motionId, colonyAddress: $colonyAddress, userAddress: $userAddress) @client
}

query MotionFinalized($motionId: Int!, $colonyAddress: String!) {
  motionFinalized(motionId: $motionId, colonyAddress: $colonyAddress) @client
}

query MotionStakerReward($motionId: Int!, $colonyAddress: String!, $userAddress: String!) {
  motionStakerReward(motionId: $motionId, colonyAddress: $colonyAddress, userAddress: $userAddress) @client {
    stakingRewardYay
    stakingRewardNay
    stakesYay
    stakesNay
    claimedReward
  }
}

query StakeAmountsForMotion($colonyAddress: String!, $userAddress: String!, $motionId: Int!) {
  stakeAmountsForMotion(colonyAddress: $colonyAddress, userAddress: $userAddress, motionId: $motionId) @client {
    totalStaked {
      YAY
      NAY
    }
    userStake {
      YAY
      NAY
    }
    requiredStake
  }
}

query MotionObjectionAnnotation($motionId: Int!, $colonyAddress: String!) {
  motionObjectionAnnotation(motionId: $motionId, colonyAddress: $colonyAddress) @client {
    address
    metadata
  }
}

query MotionStatus($motionId: Int!, $colonyAddress: String!) {
  motionStatus(motionId: $motionId, colonyAddress: $colonyAddress) @client
}

query MotionTimeoutPeriods($motionId: Int!, $colonyAddress: String!) {
  motionTimeoutPeriods(motionId: $motionId, colonyAddress: $colonyAddress) @client {
    timeLeftToStake
    timeLeftToSubmit
    timeLeftToReveal
    timeLeftToEscalate
  }
}
